@using FormBuilder.Models

<RadzenFormField Class="w-100" Text="@Field.Label" AllowFloatingLabel="true">
    <Start>@Prepend</Start>
    <ChildContent>
        @switch (Field)
        {
            case TextField textField:
                <RadzenTextBox
                    Name="@textField.Name"
                    @bind-Value="textField.Value"
                    Placeholder="@textField.Placeholder"
                    MaxLength="@textField.MaxLength"
                    ReadOnly="Disabled">
                </RadzenTextBox>
                break;
            case SelectField selectField:
                <RadzenDropDown
                    Name="@Field.Name"
                    @bind-Value="selectField.Value"
                    Data="@selectField.Options"
                    Placeholder="@selectField.Placeholder"
                    ReadOnly="Disabled">
                </RadzenDropDown>
                break;
            case NumericField<int> numericIntField:
                <RadzenNumeric
                    Name="@numericIntField.Name"
                    @bind-Value="numericIntField.Value"
                    Placeholder="@numericIntField.Placeholder"
                    Min="numericIntField.Min"
                    Max="numericIntField.Max"
                    ShowUpDown="numericIntField.ShowUpDown"
                    Step="@numericIntField.Step"
                    Format="@numericIntField.Format"
                    ReadOnly="Disabled">
                </RadzenNumeric>
                break;
            case NumericField<decimal> numericField:
                <RadzenNumeric
                    Name="@numericField.Name"
                    @bind-Value="numericField.Value"
                    Placeholder="@numericField.Placeholder"
                    Min="numericField.Min"
                    Max="numericField.Max"
                    ShowUpDown="numericField.ShowUpDown"
                    Step="@numericField.Step"
                    Format="@numericField.Format"
                    ReadOnly="Disabled">
                </RadzenNumeric>
                break;
            case DateField dateField:
                <RadzenDatePicker
                    Name="@dateField.Name"
                    @bind-Value="dateField.Value"
                    Placeholder="@dateField.Placeholder"
                    DateFormat="@dateField.DateFormat"
                    ReadOnly="Disabled">
                </RadzenDatePicker>
                break;
        }
    </ChildContent>
    <End>@Append</End>
    <Helper>
        @if (!string.IsNullOrEmpty(Field.Hint))
        {
            <RadzenText TextStyle="TextStyle.Caption">@Field.Hint</RadzenText>
        }
        
        @foreach(var validator in Field.Validators)
        {
            switch (validator)
            {
                case RequiredValidator requiredValidator:
                    @if (requiredValidator.ShowRequiredHint)
                    {
                        <RadzenText TextStyle="TextStyle.Caption">
                            <span class="text-danger">*</span> required
                        </RadzenText>
                    }
                    <RadzenRequiredValidator 
                        Component="@Field.Name" 
                        Popup="requiredValidator.ShowAsPopup"
                        Text="@requiredValidator.Text">
                    </RadzenRequiredValidator>
                    break;
                case EmailValidator emailValidator:
                    <RadzenEmailValidator 
                        Component="@Field.Name" 
                        Popup="emailValidator.ShowAsPopup"
                        Text="@emailValidator.Text">
                    </RadzenEmailValidator>
                    break;
                case LengthValidator lengthValidator:
                    <RadzenLengthValidator 
                        Component="@Field.Name" 
                        Min="lengthValidator.MaxLength" 
                        Max="lengthValidator.MinLength" 
                        Popup="lengthValidator.ShowAsPopup"
                        Text="@lengthValidator.Text">
                    </RadzenLengthValidator>
                    break;
                case RangeValidator rangeValidator:
                    <RadzenNumericRangeValidator 
                        Component="@Field.Name" 
                        Min="rangeValidator.Min" 
                        Max="rangeValidator.Max" 
                        Popup="rangeValidator.ShowAsPopup"
                        Text="@rangeValidator.Text">
                    </RadzenNumericRangeValidator>
                    break;
            }
        }
    </Helper>
</RadzenFormField>
